@import 'sizes';

$mobile: 480px;
$small: 600px;
$medium: 1000px;
$large: 1200px;
$max-width: $large;

@mixin site-width {
  width: 100%;
  max-width: $max-width;
  margin: 0 auto;
}

// media queries
@mixin mq($media) {
  @if $media == mobile {
    @media only screen and (max-width: $mobile) { @content; }
  } @else if $media == small {
    @media only screen and (max-width: $small) { @content; }
  } @else if $media == medium {
    @media only screen and (max-width: $medium) { @content; }
  } @else if $media == large {
    @media only screen and (min-width: $medium + 1px) { @content; }
  }
}

///
/// Viewport sized typography with minimum and maximum values
///
/// @author Eduardo Boucas (@eduardoboucas)
///
/// @param {Number}   $responsive  - Viewport-based size
/// @param {Number}   $min         - Minimum font size (px)
/// @param {Number}   $max         - Maximum font size (px)
///                                  (optional)
/// @param {Number}   $fallback    - Fallback for viewport-
///                                  based units (optional)
///
/// @example scss - 5vw font size (with 50px fallback),
///                 minumum of 35px and maximum of 150px
///  @include responsive-font(5vw, 35px, 150px, 50px);
///
@mixin responsive-font($responsive, $min, $max: false, $fallback: false) {
  $responsive-unitless: $responsive / ($responsive - $responsive + 1);
  $dimension: if(unit($responsive) == 'vh', 'height', 'width');
  $min-breakpoint: $min / $responsive-unitless * 100;

  @media (max-#{$dimension}: #{$min-breakpoint}) {
    font-size: $min;
  }

  @if $max {
    $max-breakpoint: $max / $responsive-unitless * 100;

    @media (min-#{$dimension}: #{$max-breakpoint}) {
      font-size: $max;
    }
  }

  @if $fallback {
    font-size: $fallback;
  }

  font-size: $responsive;
}
